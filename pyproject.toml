[build-system]
requires = [
    'setuptools',
]
build-backend = 'setuptools.build_meta'


##

[project]
name = 'omlish'
authors = [{name = 'wrmsr'}]
urls = {source = 'https://github.com/wrmsr/omlish'}
license = {text = 'BSD-3-Clause'}
requires-python = '>=3.12'

dynamic = ['version']

description = 'omlish'
classifiers = [
    'License :: OSI Approved :: BSD License',
    'Development Status :: 2 - Pre-Alpha',
    'Intended Audience :: Developers',

    'Operating System :: OS Independent',
    # 'Operating System :: POSIX',
]

[project.optional-dependencies]
async = [
    'anyio',
    'greenlet; python_version < 3.13',
]
trio = [
    'trio',
    'trio-asyncio',
]
http = ['httpx']
sql = ['sqlalchemy']
wrapt = ['wrapt']
yaml = ['pyyaml']
jinja2 = ['jinja2']

server = [
    'h11',
    'h2',
    'priority',
    'wsproto',
]

test=['pytest']


##

[tool.setuptools]
include-package-data = false

[tool.setuptools.dynamic]
version = {attr = 'omlish.__about__.__version__'}

[tool.setuptools.packages.find]
include = ['omlish', 'omlish.*']
exclude = ['*.tests', '*.tests.*']


##

[tool.omlish.pyproject.srcs]
main = [
    'omlish',
    'omdev',
    'ominfra',
    'omserv',
    'app',
]

ml = [
    '@main',
    'omml',
]

all = [
    '@ml',
    'x',
]

[tool.omlish.pyproject.venvs._default]
interp = '@12'
requires = ['requirements-dev.txt']
srcs = ['@main']

[tool.omlish.pyproject.venvs.default]
inherits = ['_default']
requires = ['requirements-ext.txt']

[tool.omlish.pyproject.venvs.'13']
inherits = ['_default']
interp = '@13'

[tool.omlish.pyproject.venvs.'13t']
inherits = ['_default']
interp = '@13t'

[tool.omlish.pyproject.venvs._old]
requires = []
srcs = []

[tool.omlish.pyproject.venvs.'11']
inherits = ['_old']
interp = '@11'

[tool.omlish.pyproject.venvs.'10']
inherits = ['_old']
interp = '@10'

[tool.omlish.pyproject.venvs.'9']
inherits = ['_old']
interp = '@9'

[tool.omlish.pyproject.venvs.'8']
inherits = ['_old']
interp = '@8'

[tool.omlish.pyproject.venvs.docker]
inherits = ['_default']
docker = 'omlish-dev'

[tool.omlish.pyproject.venvs.docker-amd64]
inherits = ['_default']
docker = 'omlish-dev-amd64'

[tool.omlish.pyproject.venvs.deploy]
interp = '3.12'
requires = ['requirements.txt']


##

[tool.mypy]
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true

pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
show_traceback = true
# verbosity = 1

check_untyped_defs = true

enable_incomplete_feature = [
    'NewGenericSyntax',
]

exclude = [
    'omlish/dataclasses/tests/cpython/',
]


##

[tool.pytest.ini_options]
addopts = [
    '-v',
    '--tb=short',
    '--showlocals',
    '--strict-markers',
    '--durations=5',
    '--durations-min=2',
    # '--log=info',
]
asyncio_mode = 'strict'
junit_family = 'xunit2'
junit_duration_report = 'call'
timeout = 60
session_timeout = 600


##

[tool.ruff]
line-length = 120
indent-width = 4

[tool.ruff.lint]
exclude = [
    'omlish/dataclasses/tests/cpython/*',
]

select = ['ALL']

ignore = [

    'ANN001',  # Missing-type-function-argument
    'ANN002',  # Missing-type-args
    'ANN003',  # Missing-type-kwargs
    'ANN201',  # Missing-return-type-undocumented-public-function
    'ANN202',  # Missing-return-type-private-function
    'ANN204',  # Missing-return-type-special-method
    'ANN205',  # Missing return type annotation for staticmethod
    'ANN206',  # Missing return type annotation for classmethod
    'ANN401',  # Dynamically typed expressions (typing.Any) are disallowed in `*args`
    'ARG001',  # Unused function argument,
    'ARG002',  # Unused method argument
    'ASYNC115',  # Use `asyncio.lowlevel.checkpoint()` instead of `asyncio.sleep(0)`
    'B008',  # Do not perform function call in argument defaults
    'B009',  # Do not call `getattr` with a constant attribute value
    'B010',  # Set-attr-with-constant
    'B028',  # No explicit `stacklevel` keyword argument found
    'B905',  # `zip()` without an explicit `strict=` parameter'
    'C408',  # Unnecessary `dict` call (rewrite as a literal)
    'C901',  # Function is too complex
    'D',  # Docstrings
    'E731',  # Do not assign a `lambda` expression, use a `def`
    'E741',  # Ambiguous variable name
    'E742',  # Ambiguous class name
    'EM101',  # Exception must not use a string literal, assign to variable first
    'EM102',  # Exception must not use an f-string literal, assign to variable first
    'ERA001',  # Found commented-out code
    'F541',  # F-string without any placeholders
    'FBT001',  # Boolean-typed positional argument in function definition
    'FBT002',  # Boolean default positional argument in function definition
    'FBT003',  # Boolean positional value in function call
    'FIX',
    'FLY002',  # Static-join-to-f-string
    'N804',  # First argument of a class method should be named `cls`
    'PERF401',  # Use a list comprehension to create a transformed list
    'PGH003',  # Use specific rule codes when ignoring type issues
    'PGH004',  # Use specific rule codes when using `noqa`
    'PLC0208',  # Iteration-over-set
    'PLR0911',  # Too many return statements
    'PLR0912',  # Too many branches
    'PLR0913',  # Too many arguments in function definition
    'PLR0915',  # Too many statements
    'PLR2004',  # Magic value used in comparison
    'PLR2044',  # Line with empty comment
    'PLW0603',  # Using the global statement is discouraged
    'PLW2901',  # `for` loop variable overwritten by assignment target
    'PT004',  # Fixture does not return anything, add leading underscore
    'PT016',  # Pytest-fail-without-message
    'PT018',  # Assertion should be broken down into multiple parts
    'PTH',  # pathlib
    'Q003',  # Change outer quotes to avoid escaping inner quotes
    'RET504',  # Unnecessary assignment before `return` statement
    'RET505',  # Unnecessary `else` after `return` statement
    'RET506',  # Unnecessary `elif` after `raise` statement
    'RET508',  # Unnecessary `elif` after `break` statement
    'RUF009',  # Do not perform function call `col.TypeMap` in dataclass defaults
    'RUF018',  # Avoid assignment expressions in `assert` statements
    'RUF100',  # Unused blanket `noqa` directive
    'S102',  # Use of `exec` detected
    'S311',  # Standard pseudo-random generators are not suitable for cryptographic purposes
    'S603',  # `subprocess` call: check for execution of untrusted input
    'S604',  # Call-with-shell-equals-true
    'S606',  # Starting a process without a shell
    'S607',  # Starting a process with a partial executable path
    'SIM102',  # Use a single `if` statement instead of nested `if` statements
    'SIM103',  # Return the negated condition directly
    'SIM105',  # Use `contextlib.suppress(KeyError)` instead of `try`-`except`-`pass`
    'SIM108',  # Use ternary operator
    'SIM114',  # Combine `if` branches using logical `or` operator
    'SIM117',  # Combine `with` statements
    'T201',  # `print` found
    'T203',  # `pprint` found
    'TCH001',  # typing-only-first-party-import
    'TD001', # Invalid TODO tag
    'TD002',  # Missing author in TODO
    'TD003',  # Missing issue link on the line following this TODO
    'TD004',  # Missing colon in TODO
    'TD005',  # Missing issue description after `TODO`
    'TID252',  # Prefer absolute imports over relative imports from parent modules
    'TRY002',  # Create your own exception
    'TRY003',  # Avoid specifying long messages outside the exception class
    'TRY300',  # Try-consider-else
    'UP038',  # Use `X | Y` in `isinstance` call instead of `(X, Y)`

    # FIXME: mypy error: PEP 695 type aliases are not yet supported
    'UP040',  # type alias uses `TypeAlias` annotation instead of the `type` keyword

]

[tool.ruff.lint.per-file-ignores]
'**/__init__.py' = [
    'F401',  # imported but unused
]
'**/tests/*' = [
    'B011',  # do not `assert False
    'S101',  # use of `assert` detected
]
'**/scripts/*' = [
    'UP',
]
'omlish/testing/*' = [
    'S101',  # use of `assert` detected
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.flake8-quotes]
inline-quotes = 'single'

[tool.ruff.lint.isort]
force-single-line = true
lines-after-imports = 2

# [tool.ruff.format]
# quote-style = 'single'
# indent-style = 'space'


##

[tool.flake8]
max-line-length = 120

show-source = true
statistics = true

exclude = [
    '.cache',
    '.git',
    '.idea',
    '.venv',
    'omlish/dataclasses/tests/cpython/',
]

ignore = [
    'E231',
    'E265',
    'E701',
    'E704',
    'E711',
    'E712',
    'E721',
    'E731',
    'E741',
    'E742',
    'F541',
    'F821',
    'F999',
    'W503',
    'W504',
]
